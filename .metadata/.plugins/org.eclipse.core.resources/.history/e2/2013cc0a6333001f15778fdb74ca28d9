package com.spring5legacy.mypro00.common.fileupload;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import net.coobird.thumbnailator.Thumbnailator;

@RestController
public class FileUploadAjaxController {
	private String uploadFileRepoDir = "C:/myupload";// 업로드 파일 저장 폴더

//	// 업로드 요청 jsp 호출 메서드
//	@GetMapping("/fileUploadByAjax")
//	public String showFileUploadPage() {
//
//		return "sample/fileUploadByAjax";
//	}

	// 파일업로드 요청 처리
	// 보낸 파일을 받음 > 저장
	// 스프링-MVC에는 제공하는 MultipartFile 타입의 매개변수를 이용, 파일-input의 name 속성과 매개변수 이름이 동일해야 함
	// 여러개의 파일을 처리하기 위해 MultipartFile[] 타입을 사용
	@PostMapping(value = "/doFileUploadByAjax", produces = { "application/json; charset=utf-8" })
	@ResponseBody
	public List<AttachFileDTO> doFileUploadByAjax(MultipartFile[] uploadFiles) {

		if (uploadFiles == null) {
			return new ArrayList<AttachFileDTO>();
		}
		
		List<AttachFileDTO> attachFileList = new ArrayList<AttachFileDTO>(); 
		AttachFileDTO attachFile = null;
		
		// 날짜 형식 파일 경로 생성
		String dateDir = getDatePathNmae();	
		File fileUploadPath = new File(uploadFileRepoDir, dateDir);
		fileUploadPath.mkdirs();
		
		String uploadFileName = null;
		String uuid = null;
		File thumbnailFile = null;
		FileOutputStream myfos = null; 
		InputStream is = null;
		
		for (MultipartFile uploadFile : uploadFiles) {
			
			// AttachFileDTO 객체 생성 JSON
			attachFile = new AttachFileDTO();
			
			attachFile.setUploadPath(dateDir);
			attachFile.setRepoPath(uploadFileRepoDir);
			
			
			uploadFileName = uploadFile.getOriginalFilename(); // 원본 파일 이름 가져옴
			uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);
			
			attachFile.setFileName(uploadFileName);

			// 중복 파일 덮어쓰기 문제 해결
			uuid = UUID.randomUUID().toString();
			uploadFileName = uuid + "_" + uploadFileName;
			
			attachFile.setUuid(uuid);

			// 전송할 파일 객체 생성
			File saveUploadFile = new File(fileUploadPath, uploadFileName);

			try {
				uploadFile.transferTo(saveUploadFile);// 저장
				
				if (isImageFile(saveUploadFile)) {
					attachFile.setFileType("I");
					
					thumbnailFile = new File(fileUploadPath,"s_" + uploadFileName);
					myfos = new FileOutputStream(thumbnailFile); 
					
					is = uploadFile.getInputStream();
					
					Thumbnailator.createThumbnail(is, myfos, 50, 50);
					
					is.close();
					myfos.flush();
					myfos.close();
					
				} else {
					attachFile.setFileType("F");
				}
			} catch (IOException e) {
				System.out.println(e.getMessage());
			}
			
			attachFileList.add(attachFile);

		}

		return attachFileList;
	}

	// 날짜 형식 문자열 생성 메소드(yyyy/MM/dd)
	private String getDatePathNmae() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		return sdf.format(new Date());
	}
	
	// 이미지파일 확인 메소드
	private boolean isImageFile(File myFile) {
		
		String myFileContentType = null;
		
		try {
			// 파일의 ContentType 반환 
			myFileContentType = Files.probeContentType(myFile.toPath());
			return myFileContentType.startsWith("image");
		} catch (IOException e) {
			e.getMessage();
			return false;
		}
	}
	
	// 첨부 파일 삭제 메소드
// @DeleteMapping(value = {"/deleteFile"}) 
//		public ResponseEntity<String>deleteFile( @RequestParam("fileName") String fileName,@RequestParam("fileType") String fileType){
	
	@DeleteMapping(value = {"/deleteFile"}) 
  		public ResponseEntity<String>deleteFile(String fileName,String fileType){
	 
		
		System.out.println("fileName: " + fileName);
		System.out.println("fileType: " + fileType);
		
		try {
			fileName = URLDecoder.decode(fileName,"utf-8");
			System.out.println("fileName: " + fileName);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		File delFile = new File(fileName);
		
		boolean delResult = delFile.delete();
		// 정상 삭제 = true 반환 , 실패시 false 반환
		
		if (!delResult) {
			return new ResponseEntity<String>("DelFail", HttpStatus.OK);
		}
		
		if (fileType.equals("I")) {
			delFile = new File(fileName.replaceFirst("s_", ""));
			delResult = delFile.delete();
		}
		
		return delResult? new ResponseEntity<String>("DelSuccess",HttpStatus.OK) 
				        : new ResponseEntity<String>("DelFail",HttpStatus.OK);
	}
}
