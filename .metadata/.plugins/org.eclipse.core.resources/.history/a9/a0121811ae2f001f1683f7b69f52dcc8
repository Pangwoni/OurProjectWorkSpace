package com.spring5legacy.mypro00.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.spring5legacy.mypro00.common.paging.MyReplyPagingCreatorDTO;
import com.spring5legacy.mypro00.common.paging.MyReplyPagingDTO;
import com.spring5legacy.mypro00.domain.MyReplyVO;
import com.spring5legacy.mypro00.service.MyReplyService;

import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping(value = {"/myreplies", "/replies"})
public class MyReplyController {

	private MyReplyService myReplyService;
	
	// 게시물 댓글 및 답글 조회 서비스
	@GetMapping(value= {"/list/{bno}/{pageNum}"} , produces = "application/json;charset=utf-8")
	public ResponseEntity<MyReplyPagingCreatorDTO> showReplyList(@PathVariable("bno") Long bno, @PathVariable("pageNum") Integer pageNum ){
		
		MyReplyPagingCreatorDTO myReplyPagingCreator = myReplyService.getBoardList(new MyReplyPagingDTO(bno,pageNum));
		return new ResponseEntity<MyReplyPagingCreatorDTO>(myReplyPagingCreator, HttpStatus.OK);
	}
	
	@PostMapping(value= {"/{bno}/new"} , consumes = "application/json;charset=utf-8" ,produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> registerComment(@PathVariable("bno") Long bno, @RequestBody MyReplyVO myReply){
		
		Long registeredRno = myReplyService.registerComment(myReply);
		String _registeredRno = null;
		
		if (registeredRno != null) {
			_registeredRno = String.valueOf(registeredRno);
		} else {
			_registeredRno = "";
		}
		
		return registeredRno != null ? new ResponseEntity<String>(_registeredRno, HttpStatus.OK)
							  		 : new ResponseEntity<String>(_registeredRno, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
    // 게시물 답글 등록 서비스
    @PostMapping(value= {"/{bno}/{prno}/reply"} , consumes = "application/json;charset=utf-8", produces = "text/plain;charset=utf-8")
    public ResponseEntity<String> registerReplyComment(@PathVariable("bno") Long bno, @PathVariable("prno") Long prno, @RequestBody MyReplyVO myReply) {
        myReply.setBno(bno);
        myReply.setPrno(prno);
        Long registeredRno = myReplyService.registerReply(myReply);
        String _registeredRno = (registeredRno != null) ? String.valueOf(registeredRno) : "";

        return (registeredRno != null) ? new ResponseEntity<>(_registeredRno, HttpStatus.OK)
                                       : new ResponseEntity<>(_registeredRno, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @PutMapping("/{bno}/{rno}")
    public ResponseEntity<String> updateComment(@PathVariable("bno") Long bno, @PathVariable("rno") Long rno, @RequestBody MyReplyVO myReply) {
    	myReply.setBno(bno);
    	myReply.setRno(rno);
    	Long registeredRno = myReplyService.updateCommentAndReply(myReply);
    	String _registeredRno = (registeredRno != null) ? String.valueOf(registeredRno) : "";
    	
        return new ResponseEntity<>(_registeredRno, HttpStatus.OK);
    }
    
    // 블라인드 처리
    @PatchMapping("/{bno}/{rno}")
    public ResponseEntity<String> updateSetBlind(@PathVariable("bno") Long bno, @PathVariable("rno") Long rno, @RequestBody MyReplyVO myReply) {
    	myReply.setBno(bno);
    	myReply.setRno(rno);
    	Long registeredRno = myReplyService.updateSetBlind(myReply);
    	String _registeredRno = (registeredRno != null) ? String.valueOf(registeredRno) : "";
    	
        return new ResponseEntity<>(_registeredRno, HttpStatus.OK);
    }
    
    // 삭제 처리
    @DeleteMapping("/{bno}/{rno}")
    public ResponseEntity<String> deleteReplies(@PathVariable("bno") Long bno, @PathVariable("rno") Long rno, @RequestBody MyReplyVO myReply) {
    	myReply.setBno(bno);
    	myReply.setRno(rno);
    	Long registeredRno = myReplyService.deleteReplies(myReply);
    	String _registeredRno = (registeredRno != null) ? String.valueOf(registeredRno) : "";
    	
        return new ResponseEntity<>(_registeredRno, HttpStatus.OK);
    }
    
    // 특정 게시물 조회
//    @GetMapping("/reply/{rno}")
//    public ResponseEntity<MyReplyVO> getReply(@PathVariable("rno") Long rno) {
//        MyReplyVO reply = 서비스.getReply(rno);
//        if (reply != null) {
//            return new ResponseEntity<>(reply, HttpStatus.OK);
//        } else {
//            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
//        }
    }
    
}
